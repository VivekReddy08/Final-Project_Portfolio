# -*- coding: utf-8 -*-
"""Streamlit Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ngUXzmXhQ6yMQfM8lSxCc8NGVAtxL-jJ
"""

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import joblib
import os

# Load the trained ensemble model
model_path = "ensemble_model.pkl"
if not os.path.exists(model_path):
    st.error("Model file not found. Please ensure 'ensemble_model.pkl' is available in the repository.")
    st.stop()

ensemble_model = joblib.load(model_path)

# Streamlit app with enhanced UI
def main():
    st.set_page_config(page_title="Football Outcome Predictor", layout="wide")
    st.title("‚öΩ AI-Powered Football Match Outcome Predictor")
    st.sidebar.title("Prediction Settings")

    # Layout with columns
    col1, col2 = st.columns(2)

    with col1:
        st.header("Input Match Details")
        HomeGoalAvg = st.number_input("üè† Average Goals by Home Team (Last 5 Matches):", min_value=0.0, step=0.1)
        AwayGoalAvg = st.number_input("‚úàÔ∏è Average Goals by Away Team (Last 5 Matches):", min_value=0.0, step=0.1)
        HomeWinRate = st.number_input("üè† Home Team Win Rate (%):", min_value=0.0, max_value=1.0, step=0.01)
        AwayWinRate = st.number_input("‚úàÔ∏è Away Team Win Rate (%):", min_value=0.0, max_value=1.0, step=0.01)

    with col2:
        st.header("Visualizations")
        # Example chart (to be replaced with actual data visualizations)
        sample_data = {"Matches": ["Match1", "Match2", "Match3", "Match4", "Match5"],
                       "Goals": [2, 3, 1, 4, 2]}
        df = pd.DataFrame(sample_data)
        st.bar_chart(df.set_index("Matches"))

    # Predict outcome
    if st.button("üîÆ Predict Outcome"):
        input_data = np.array([[HomeGoalAvg, AwayGoalAvg, HomeWinRate, AwayWinRate]])
        prediction = ensemble_model.predict(input_data)[0]
        outcome_map = {0: "Home Win", 1: "Draw", 2: "Away Win"}
        st.subheader("Prediction Result")
        st.write(f"üèÜ **Predicted Outcome:** {outcome_map[prediction]}")

        # Add a chart for predicted probabilities
        st.subheader("Prediction Probabilities")
        probabilities = ensemble_model.predict_proba(input_data)[0]
        prob_df = pd.DataFrame(probabilities, index=["Home Win", "Draw", "Away Win"], columns=["Probability"])
        st.bar_chart(prob_df)

if __name__ == "__main__":
    main()

