# -*- coding: utf-8 -*-
"""Streamlit Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ngUXzmXhQ6yMQfM8lSxCc8NGVAtxL-jJ
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib

# Load Data
@st.cache
def load_data():
    combined_data = pd.read_csv("combined_data.csv")  # Replace with your dataset
    filtered_data = pd.read_csv("filtered_data.csv")  # Replace with your dataset
    return combined_data, filtered_data

# Load Model
@st.cache
def load_model():
    return joblib.load("ensemble_model.pkl")

# Interactive Visualizations
def plot_team_performance(team, data):
    team_data = data[data['Team'] == team]
    plt.figure(figsize=(10, 5))
    sns.lineplot(x='MatchDate', y='Points', data=team_data, label='Points')
    sns.lineplot(x='MatchDate', y='GoalsScored', data=team_data, label='Goals Scored')
    plt.title(f"Performance Over Time: {team}")
    plt.xlabel("Date")
    plt.ylabel("Metrics")
    plt.legend()
    st.pyplot(plt)

def plot_goal_distribution(team, data):
    team_data = data[data['Team'] == team]
    plt.figure(figsize=(10, 5))
    sns.histplot(team_data['GoalsScored'], bins=10, kde=True)
    plt.title(f"Goal Distribution for {team}")
    plt.xlabel("Goals")
    plt.ylabel("Frequency")
    st.pyplot(plt)

def plot_match_outcomes(team, data):
    team_data = data[data['Team'] == team]
    outcomes = team_data['MatchOutcome'].value_counts()
    plt.figure(figsize=(5, 5))
    outcomes.plot.pie(autopct='%1.1f%%', startangle=90, colors=['#4CAF50', '#FFC107', '#F44336'])
    plt.title(f"Match Outcomes for {team}")
    st.pyplot(plt)

def plot_head_to_head(team1, team2, data):
    h2h_data = data[(data['HomeTeam'] == team1) & (data['AwayTeam'] == team2) |
                    (data['HomeTeam'] == team2) & (data['AwayTeam'] == team1)]
    outcomes = h2h_data['MatchOutcome'].value_counts()
    plt.figure(figsize=(5, 5))
    outcomes.plot.pie(autopct='%1.1f%%', startangle=90, colors=['#4CAF50', '#FFC107', '#F44336'])
    plt.title(f"Head-to-Head: {team1} vs {team2}")
    st.pyplot(plt)

def app():
    st.title("AI-Powered Football Match Outcome Predictor")
    st.header("Interactive Analytics and Visualizations")

    # Load data and model
    combined_data, filtered_data = load_data()
    model = load_model()

    # Debugging: Print column names
    st.write("Columns in the dataset:", combined_data.columns)

    # Team Selection
    teams = combined_data['Team'].unique() if 'Team' in combined_data.columns else []
    if not teams:
        st.error("The column 'Team' does not exist in the dataset. Please check the dataset structure.")
        return

    selected_team = st.selectbox("Select a Team", teams)

    st.subheader("Team Performance Over Time")
    plot_team_performance(selected_team, combined_data)

    st.subheader("Goal Distribution")
    plot_goal_distribution(selected_team, combined_data)

    st.subheader("Match Outcomes")
    plot_match_outcomes(selected_team, combined_data)

    st.subheader("Head-to-Head Comparison")
    team2 = st.selectbox("Select Opponent", [t for t in teams if t != selected_team])
    plot_head_to_head(selected_team, team2, combined_data)

    st.subheader("Predict Outcome")
    HomeGoalAvg = st.number_input("Average Goals by Home Team (Last 5 Matches):", min_value=0.0, step=0.1)
    AwayGoalAvg = st.number_input("Average Goals by Away Team (Last 5 Matches):", min_value=0.0, step=0.1)
    HomeWinRate = st.number_input("Home Team Win Rate:", min_value=0.0, max_value=1.0, step=0.01)
    AwayWinRate = st.number_input("Away Team Win Rate:", min_value=0.0, max_value=1.0, step=0.01)

    if st.button("Predict Outcome"):
        input_data = np.array([[HomeGoalAvg, AwayGoalAvg, HomeWinRate, AwayWinRate]])
        prediction = model.predict(input_data)[0]
        outcome_map = {0: "Home Win", 1: "Draw", 2: "Away Win"}
        st.write(f"The predicted outcome is: **{outcome_map[prediction]}**")

if __name__ == "__main__":
    app()





